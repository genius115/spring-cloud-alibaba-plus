<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <parent>
        <artifactId>spring-cloud-alibaba-plus</artifactId>
        <groupId>com.xiaomai</groupId>
        <version>1.0-SNAPSHOT</version>
    </parent>
    <modelVersion>4.0.0</modelVersion>

    <artifactId>alibaba-nacos-provider</artifactId>

    <properties>
        <knife4j-spring-boot.version>2.0.5</knife4j-spring-boot.version>
    </properties>

    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
            <!--<exclusions>
                &lt;!&ndash; 切换log4j2日志读取 &ndash;&gt;
                <exclusion>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-starter-logging</artifactId>
                </exclusion>
                &lt;!&ndash;排除这个slf4j-log4j12 &ndash;&gt;
                <exclusion>
                    <groupId>org.slf4j</groupId>
                    <artifactId>slf4j-log4j12</artifactId>
                </exclusion>
            </exclusions>-->
        </dependency>

        <!--
        spring boot使用spring-boot-configuration-processor获取配置文件
            spring boot中获取配置文件的方式，通常大家最常用的是@Value("${mail.username}")的形式，
            也可以用spring-boot-configuration-processor来更优雅得读取配置文件
            上@PropertySource("classpath:your.properties")，其余用法与加载yml的配置一样

            @Component
            @PropertySource(value = {"classpath:static/config/authorSetting.properties"},
                    ignoreResourceNotFound = false, encoding = "UTF-8", name = "authorSetting.properties")
            public class AuthorTest {
                @Value("${author.name}")
                private String name;
                @Value("${author.age}")
                private int age;
            }
            @PropertySource 中的属性解释
            1.value：指明加载配置文件的路径。
            2.ignoreResourceNotFound：指定的配置文件不存在是否报错，默认是false。当设置为 true 时，若该文件不存在，程序不会报错。实际项目开发中，最好设置 ignoreResourceNotFound 为 false。
            3.encoding：指定读取属性文件所使用的编码，我们通常使用的是UTF-8。

            @ConfigurationProperties

            @Component
            @ConfigurationProperties(prefix = "author")
            @PropertySource(value = {"classpath:static/config/authorSetting.properties"},
                    ignoreResourceNotFound = false, encoding = "UTF-8", name = "authorSetting.properties")
            public class AuthorTest {
                private String name;
                private int age;
            }

            使用 @EnableConfigurationProperties 开启 @ConfigurationProperties 注解。
        -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-configuration-processor</artifactId>
            <optional>true</optional>
        </dependency>

        <!-- 监控-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>

        <!-- Nacos注册 -->
        <dependency>
            <groupId>com.alibaba.cloud</groupId>
            <artifactId>spring-cloud-starter-alibaba-nacos-discovery</artifactId>
        </dependency>

        <!-- Nacos配置中心 -->
        <dependency>
            <groupId>com.alibaba.cloud</groupId>
            <artifactId>spring-cloud-starter-alibaba-nacos-config</artifactId>
        </dependency>


        <!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger2 -->
        <dependency>
            <groupId>io.springfox</groupId>
            <artifactId>springfox-swagger2</artifactId>
            <version>2.9.2</version>
            <exclusions>
                <exclusion>
                    <groupId>io.swagger</groupId>
                    <artifactId>swagger-models</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <!-- https://mvnrepository.com/artifact/io.swagger/swagger-models -->
        <dependency>
            <groupId>io.swagger</groupId>
            <artifactId>swagger-models</artifactId>
            <version>1.5.21</version>
        </dependency>

        <!--使用springboot2.3.3.RELEASE 没有自动引入 validation对应的包
        验证 spring-boot-starter-web   2.3之后去掉了验证

        hibernate validation：hibernate validation是对这个规范的实现，并增加了一些其他校验注解，如@Email，@Length，@Range等等
        spring validation：spring validation对hibernate validation进行了二次封装，在springmvc模块中添加了自动校验，并将校验信息封装进了特定的类中

       -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-validation</artifactId>
        </dependency>

        <dependency>
            <groupId>com.github.xiaoymin</groupId>
            <artifactId>knife4j-spring-boot-starter</artifactId>
            <version>${knife4j-spring-boot.version}</version>
        </dependency>

        <!--Mybatis-plus ORM框架-->
        <dependency>
            <groupId>com.baomidou</groupId>
            <artifactId>mybatis-plus-boot-starter</artifactId>
            <exclusions>
                <exclusion>
                    <groupId>com.baomidou</groupId>
                    <artifactId>mybatis-plus-generator</artifactId>
                </exclusion>
            </exclusions>
        </dependency>

        <!--代码生成器 START -->
        <!--<dependency>-->
            <!--<groupId>com.baomidou</groupId>-->
            <!--<artifactId>mybatis-plus-generator</artifactId>-->
            <!--<version>3.4.1</version>-->
        <!--</dependency>-->
        <!--<dependency>-->
            <!--<groupId>org.apache.velocity</groupId>-->
            <!--<artifactId>velocity-engine-core</artifactId>-->
            <!--<version>2.2</version>-->
        <!--</dependency>-->
        <!--<dependency>-->
            <!--<groupId>org.freemarker</groupId>-->
            <!--<artifactId>freemarker</artifactId>-->
            <!--<version>2.3.30</version>-->
        <!--</dependency>-->
        <!--代码生成器 END -->

        <!--动态数据源dynamic-->
        <dependency>
            <groupId>com.baomidou</groupId>
            <artifactId>dynamic-datasource-spring-boot-starter</artifactId>
        </dependency>
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
        </dependency>

        <dependency>
            <groupId>org.postgresql</groupId>
            <artifactId>postgresql</artifactId>
            <version>42.2.18.jre7</version>
        </dependency>

        <!--Minio 文件对象存储 3.0.12 7.0.2 8.0.2-->
        <dependency>
            <groupId>io.minio</groupId>
            <artifactId>minio</artifactId>
            <version>7.0.2</version>
        </dependency>

        <!--验证码-开始-->
        <!--<dependency>-->
            <!--<groupId>com.github.whvcse</groupId>-->
            <!--<artifactId>easy-captcha</artifactId>-->
            <!--<version>1.6.2</version>-->
        <!--</dependency>-->

        <!--<dependency>-->
            <!--<groupId>com.github.penggle</groupId>-->
            <!--<artifactId>kaptcha</artifactId>-->
            <!--<version>2.3.2</version>-->
        <!--</dependency>-->
        <!--验证码-结束-->

        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <optional>true</optional>
        </dependency>

        <dependency>
            <groupId>cn.hutool</groupId>
            <artifactId>hutool-all</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
            <exclusions>
                <exclusion>
                    <groupId>org.junit.vintage</groupId>
                    <artifactId>junit-vintage-engine</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <executions>
                    <execution>
                        <goals>
                            <goal>repackage</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>

</project>